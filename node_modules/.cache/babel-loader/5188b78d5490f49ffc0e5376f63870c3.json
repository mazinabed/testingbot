{"ast":null,"code":"/**\n * @author Michael Raith\n * @date   24.02.2016 12:04\n */\n'use strict';\n\nvar crypto = require('crypto');\n\nvar bufferAlloc = require('buffer-alloc');\n/**\n * Do a constant time string comparison. Always compare the complete strings\n * against each other to get a constant time. This method does not short-cut\n * if the two string's length differs.\n *\n * @param {string} a\n * @param {string} b\n *\n * @return {boolean}\n */\n\n\nvar safeCompare = function safeCompare(a, b) {\n  var strA = String(a);\n  var strB = String(b);\n  var lenA = strA.length;\n  var result = 0;\n\n  if (lenA !== strB.length) {\n    strB = strA;\n    result = 1;\n  }\n\n  for (var i = 0; i < lenA; i++) {\n    result |= strA.charCodeAt(i) ^ strB.charCodeAt(i);\n  }\n\n  return result === 0;\n};\n/**\n * Call native \"crypto.timingSafeEqual\" methods.\n * All passed values will be converted into strings first.\n *\n * Runtime is always corresponding to the length of the first parameter (string\n * a).\n *\n * @param {string} a\n * @param {string} b\n *\n * @return {boolean}\n */\n\n\nvar nativeTimingSafeEqual = function nativeTimingSafeEqual(a, b) {\n  var strA = String(a);\n  var strB = String(b);\n  var aLen = Buffer.byteLength(strA);\n  var bLen = Buffer.byteLength(strB); // Always use length of a to avoid leaking the length. Even if this is a\n  // false positive because one is a prefix of the other, the explicit length\n  // check at the end will catch that.\n\n  var bufA = bufferAlloc(aLen, 0, 'utf8');\n  bufA.write(strA);\n  var bufB = bufferAlloc(aLen, 0, 'utf8');\n  bufB.write(strB);\n  return crypto.timingSafeEqual(bufA, bufB) && aLen === bLen;\n};\n\nmodule.exports = typeof crypto.timingSafeEqual !== 'undefined' ? nativeTimingSafeEqual : safeCompare;","map":{"version":3,"names":["crypto","require","bufferAlloc","safeCompare","a","b","strA","String","strB","lenA","length","result","i","charCodeAt","nativeTimingSafeEqual","aLen","Buffer","byteLength","bLen","bufA","write","bufB","timingSafeEqual","module","exports"],"sources":["/Users/mazinabed/Desktop/testingbot/node_modules/safe-compare/index.js"],"sourcesContent":["/**\n * @author Michael Raith\n * @date   24.02.2016 12:04\n */\n\n'use strict';\n\nvar crypto = require('crypto');\nvar bufferAlloc = require('buffer-alloc');\n\n\n/**\n * Do a constant time string comparison. Always compare the complete strings\n * against each other to get a constant time. This method does not short-cut\n * if the two string's length differs.\n *\n * @param {string} a\n * @param {string} b\n *\n * @return {boolean}\n */\nvar safeCompare = function safeCompare(a, b) {\n    var strA = String(a);\n    var strB = String(b);\n    var lenA = strA.length;\n    var result = 0;\n\n    if (lenA !== strB.length) {\n        strB = strA;\n        result = 1;\n    }\n\n    for (var i = 0; i < lenA; i++) {\n        result |= (strA.charCodeAt(i) ^ strB.charCodeAt(i));\n    }\n\n    return result === 0;\n};\n\n\n/**\n * Call native \"crypto.timingSafeEqual\" methods.\n * All passed values will be converted into strings first.\n *\n * Runtime is always corresponding to the length of the first parameter (string\n * a).\n *\n * @param {string} a\n * @param {string} b\n *\n * @return {boolean}\n */\nvar nativeTimingSafeEqual = function nativeTimingSafeEqual(a, b) {\n    var strA = String(a);\n    var strB = String(b);\n    var aLen = Buffer.byteLength(strA);\n    var bLen = Buffer.byteLength(strB);\n\n    // Always use length of a to avoid leaking the length. Even if this is a\n    // false positive because one is a prefix of the other, the explicit length\n    // check at the end will catch that.\n    var bufA = bufferAlloc(aLen, 0, 'utf8');\n    bufA.write(strA);\n    var bufB = bufferAlloc(aLen, 0, 'utf8');\n    bufB.write(strB);\n\n    return crypto.timingSafeEqual(bufA, bufB) && aLen === bLen;\n};\n\n\nmodule.exports = (\n    typeof crypto.timingSafeEqual !== 'undefined' ?\n        nativeTimingSafeEqual :\n        safeCompare\n);\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,cAAD,CAAzB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,WAAW,GAAG,SAASA,WAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;EACzC,IAAIC,IAAI,GAAGC,MAAM,CAACH,CAAD,CAAjB;EACA,IAAII,IAAI,GAAGD,MAAM,CAACF,CAAD,CAAjB;EACA,IAAII,IAAI,GAAGH,IAAI,CAACI,MAAhB;EACA,IAAIC,MAAM,GAAG,CAAb;;EAEA,IAAIF,IAAI,KAAKD,IAAI,CAACE,MAAlB,EAA0B;IACtBF,IAAI,GAAGF,IAAP;IACAK,MAAM,GAAG,CAAT;EACH;;EAED,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,EAA3B,EAA+B;IAC3BD,MAAM,IAAKL,IAAI,CAACO,UAAL,CAAgBD,CAAhB,IAAqBJ,IAAI,CAACK,UAAL,CAAgBD,CAAhB,CAAhC;EACH;;EAED,OAAOD,MAAM,KAAK,CAAlB;AACH,CAhBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIG,qBAAqB,GAAG,SAASA,qBAAT,CAA+BV,CAA/B,EAAkCC,CAAlC,EAAqC;EAC7D,IAAIC,IAAI,GAAGC,MAAM,CAACH,CAAD,CAAjB;EACA,IAAII,IAAI,GAAGD,MAAM,CAACF,CAAD,CAAjB;EACA,IAAIU,IAAI,GAAGC,MAAM,CAACC,UAAP,CAAkBX,IAAlB,CAAX;EACA,IAAIY,IAAI,GAAGF,MAAM,CAACC,UAAP,CAAkBT,IAAlB,CAAX,CAJ6D,CAM7D;EACA;EACA;;EACA,IAAIW,IAAI,GAAGjB,WAAW,CAACa,IAAD,EAAO,CAAP,EAAU,MAAV,CAAtB;EACAI,IAAI,CAACC,KAAL,CAAWd,IAAX;EACA,IAAIe,IAAI,GAAGnB,WAAW,CAACa,IAAD,EAAO,CAAP,EAAU,MAAV,CAAtB;EACAM,IAAI,CAACD,KAAL,CAAWZ,IAAX;EAEA,OAAOR,MAAM,CAACsB,eAAP,CAAuBH,IAAvB,EAA6BE,IAA7B,KAAsCN,IAAI,KAAKG,IAAtD;AACH,CAfD;;AAkBAK,MAAM,CAACC,OAAP,GACI,OAAOxB,MAAM,CAACsB,eAAd,KAAkC,WAAlC,GACIR,qBADJ,GAEIX,WAHR"},"metadata":{},"sourceType":"script"}