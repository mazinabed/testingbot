{"ast":null,"code":"import { Readable } from 'stream';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n}\n/**\r\n * Handles Readable streams requests as concatenation through data handling as\r\n * well adding tags it each begin, end and between of the streams\r\n */\n\n\nclass SandwichStream extends Readable {\n  /**\r\n   * Initiates the SandwichStream, you can consider it also passing\r\n   * ReadableOptions to it\r\n   *\r\n   * @param head Pushes this content before all other content\r\n   * @param tail Pushes this content after all other data has been pushed\r\n   * @param separator Pushes this content between each stream\r\n   * @param remaining The other kind of options to be passed to Readable\r\n   * @example\r\n   * const ss = new SandwichStream({\r\n   *     head: 'This at the top\\n',\r\n   *     tail: '\\nThis at the bottom',\r\n   *     separator: '\\n --- \\n'\r\n   * });\r\n   */\n  constructor(_a) {\n    var {\n      head,\n      tail,\n      separator\n    } = _a,\n        remaining = __rest(_a, [\"head\", \"tail\", \"separator\"]);\n\n    super(remaining);\n    this.streamsActive = false;\n    this.streams = [];\n    this.newStreams = [];\n    this.currentStream = null;\n    this.head = null !== head && undefined !== head ? head : null;\n    this.tail = null !== tail && undefined !== tail ? tail : null;\n    this.separator = null !== separator && undefined !== separator ? separator : null;\n  }\n  /**\r\n   * Add a new Readable stream in the queue\r\n   *\r\n   * @param newStream The Readable stream\r\n   * @example\r\n   * sandwichStream.add(streamOne);\r\n   * sandwichStream.add(streamTwo);\r\n   * sandwichStream.add(streamThree);\r\n   * @throws An Error in case that this request was not accepted\r\n   * @returns This instance of Sandwich Stream\r\n   */\n\n\n  add(newStream) {\n    if (false === this.streamsActive) {\n      this.streams.push(newStream);\n      newStream.on('error', this.subStreamOnError.bind(this));\n    } else {\n      this.newStreams.push(newStream);\n    }\n\n    return this;\n  }\n  /**\r\n   * Works in a similar way from the Readable read, only that this one checks\r\n   * for whether or not a stream is already being handled\r\n   * @returns This instance of Sandwich Stream\r\n   */\n\n\n  _read() {\n    if (false === this.streamsActive) {\n      this.streamsActive = true;\n      this.pushHead();\n      this.streamNextStream();\n    }\n  }\n  /**\r\n   * Binds an error thrown from one of the streams being handled\r\n   *\r\n   * @param err Error to be bind\r\n   * @returns This instance of Sandwich Stream\r\n   */\n\n\n  subStreamOnError(err) {\n    this.emit('error', err);\n  }\n  /**\r\n   * Fetches the next stream to be handled\r\n   * @returns This instance of Sandwich Stream\r\n   */\n\n\n  streamNextStream() {\n    if (true === this.nextStream()) {\n      this.bindCurrentStreamEvents();\n    } else {\n      this.pushTail();\n      this.push(null);\n    }\n  }\n  /**\r\n   * Verifies whether or not the stream queue has ended\r\n   * @returns This instance of Sandwich Stream\r\n   */\n\n\n  nextStream() {\n    const tmp = this.streams.shift();\n    this.currentStream = undefined !== tmp ? tmp : null;\n    return null !== this.currentStream;\n  }\n  /**\r\n   * Once the current stream starts to pass their data, this handles it in a\r\n   * less complicated way\r\n   * @returns This instance of Sandwich Stream\r\n   */\n\n\n  bindCurrentStreamEvents() {\n    this.currentStream.on('readable', this.currentStreamOnReadable.bind(this));\n    this.currentStream.on('end', this.currentStreamOnEnd.bind(this));\n  }\n  /**\r\n   * Handles the data from a current stream once they are being streamed\r\n   * @returns This instance of Sandwich Stream\r\n   */\n\n\n  currentStreamOnReadable() {\n    const tmp = this.currentStream.read();\n    const data = undefined !== tmp && null !== tmp ? tmp : '';\n    this.push(data);\n  }\n  /**\r\n   * Handles the tagging once a stream is finished\r\n   * @returns This instance of Sandwich Stream\r\n   */\n\n\n  currentStreamOnEnd() {\n    this.pushSeparator();\n    this.streams.concat(this.newStreams);\n    this.newStreams = [];\n    this.streamNextStream();\n  }\n  /**\r\n   * Adds the head tag to the Sandwich Stream\r\n   * @returns This instance of Sandwich Stream\r\n   */\n\n\n  pushHead() {\n    if (null !== this.head) {\n      this.push(this.head);\n    }\n  }\n  /**\r\n   * Adds the separator tag to the Sandwich Stream\r\n   * @returns This instance of Sandwich Stream\r\n   */\n\n\n  pushSeparator() {\n    if (0 < this.streams.length && null !== this.separator) {\n      this.push(this.separator);\n    }\n  }\n  /**\r\n   * Adds the tail tag to the Sandwich Stream\r\n   * @returns This instance of Sandwich Stream\r\n   */\n\n\n  pushTail() {\n    if (null !== this.tail) {\n      this.push(this.tail);\n    }\n  }\n\n}\n\nexport default SandwichStream;\nexport { SandwichStream };","map":{"version":3,"names":["Readable","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","SandwichStream","constructor","_a","head","tail","separator","remaining","streamsActive","streams","newStreams","currentStream","undefined","add","newStream","push","on","subStreamOnError","bind","_read","pushHead","streamNextStream","err","emit","nextStream","bindCurrentStreamEvents","pushTail","tmp","shift","currentStreamOnReadable","currentStreamOnEnd","read","data","pushSeparator","concat"],"sources":["/Users/mazinabed/Desktop/testingbot/node_modules/sandwich-stream/dist/sandwich-stream.mjs"],"sourcesContent":["import { Readable } from 'stream';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\n\n/**\r\n * Handles Readable streams requests as concatenation through data handling as\r\n * well adding tags it each begin, end and between of the streams\r\n */\r\nclass SandwichStream extends Readable {\r\n    /**\r\n     * Initiates the SandwichStream, you can consider it also passing\r\n     * ReadableOptions to it\r\n     *\r\n     * @param head Pushes this content before all other content\r\n     * @param tail Pushes this content after all other data has been pushed\r\n     * @param separator Pushes this content between each stream\r\n     * @param remaining The other kind of options to be passed to Readable\r\n     * @example\r\n     * const ss = new SandwichStream({\r\n     *     head: 'This at the top\\n',\r\n     *     tail: '\\nThis at the bottom',\r\n     *     separator: '\\n --- \\n'\r\n     * });\r\n     */\r\n    constructor(_a) {\r\n        var { head, tail, separator } = _a, remaining = __rest(_a, [\"head\", \"tail\", \"separator\"]);\r\n        super(remaining);\r\n        this.streamsActive = false;\r\n        this.streams = [];\r\n        this.newStreams = [];\r\n        this.currentStream = null;\r\n        this.head = (null !== head && undefined !== head) ? head : null;\r\n        this.tail = (null !== tail && undefined !== tail) ? tail : null;\r\n        this.separator = (null !== separator && undefined !== separator) ? separator : null;\r\n    }\r\n    /**\r\n     * Add a new Readable stream in the queue\r\n     *\r\n     * @param newStream The Readable stream\r\n     * @example\r\n     * sandwichStream.add(streamOne);\r\n     * sandwichStream.add(streamTwo);\r\n     * sandwichStream.add(streamThree);\r\n     * @throws An Error in case that this request was not accepted\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    add(newStream) {\r\n        if (false === this.streamsActive) {\r\n            this.streams.push(newStream);\r\n            newStream.on('error', this.subStreamOnError.bind(this));\r\n        }\r\n        else {\r\n            this.newStreams.push(newStream);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Works in a similar way from the Readable read, only that this one checks\r\n     * for whether or not a stream is already being handled\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    _read() {\r\n        if (false === this.streamsActive) {\r\n            this.streamsActive = true;\r\n            this.pushHead();\r\n            this.streamNextStream();\r\n        }\r\n    }\r\n    /**\r\n     * Binds an error thrown from one of the streams being handled\r\n     *\r\n     * @param err Error to be bind\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    subStreamOnError(err) {\r\n        this.emit('error', err);\r\n    }\r\n    /**\r\n     * Fetches the next stream to be handled\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    streamNextStream() {\r\n        if (true === this.nextStream()) {\r\n            this.bindCurrentStreamEvents();\r\n        }\r\n        else {\r\n            this.pushTail();\r\n            this.push(null);\r\n        }\r\n    }\r\n    /**\r\n     * Verifies whether or not the stream queue has ended\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    nextStream() {\r\n        const tmp = this.streams.shift();\r\n        this.currentStream = (undefined !== tmp) ? tmp : null;\r\n        return null !== this.currentStream;\r\n    }\r\n    /**\r\n     * Once the current stream starts to pass their data, this handles it in a\r\n     * less complicated way\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    bindCurrentStreamEvents() {\r\n        this.currentStream.on('readable', this.currentStreamOnReadable.bind(this));\r\n        this.currentStream.on('end', this.currentStreamOnEnd.bind(this));\r\n    }\r\n    /**\r\n     * Handles the data from a current stream once they are being streamed\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    currentStreamOnReadable() {\r\n        const tmp = this.currentStream.read();\r\n        const data = (undefined !== tmp && null !== tmp) ? tmp : '';\r\n        this.push(data);\r\n    }\r\n    /**\r\n     * Handles the tagging once a stream is finished\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    currentStreamOnEnd() {\r\n        this.pushSeparator();\r\n        this.streams.concat(this.newStreams);\r\n        this.newStreams = [];\r\n        this.streamNextStream();\r\n    }\r\n    /**\r\n     * Adds the head tag to the Sandwich Stream\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    pushHead() {\r\n        if (null !== this.head) {\r\n            this.push(this.head);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the separator tag to the Sandwich Stream\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    pushSeparator() {\r\n        if (0 < this.streams.length && null !== this.separator) {\r\n            this.push(this.separator);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the tail tag to the Sandwich Stream\r\n     * @returns This instance of Sandwich Stream\r\n     */\r\n    pushTail() {\r\n        if (null !== this.tail) {\r\n            this.push(this.tail);\r\n        }\r\n    }\r\n}\n\nexport default SandwichStream;\nexport { SandwichStream };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}