{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import Card from \"./Components/Card/Card\";\n// import Cart from \"./Components/Cart/Cart\";\n// const { getData } = require(\"./db/db\");\n// const foods = getData();\n// const tele = window.Telegram.WebApp;\n// function App() {\n//   const [cartItems, setCartItems] = useState([]);\n//   useEffect(() => {\n//     tele.ready();\n//     setBotResponse(\"Welcome! How can I assist you today?\")\n//   },[]);\n//   const onAdd = (food) => {\n//     const exist = cartItems.find((x) => x.id === food.id);\n//     if (exist) {\n//       setCartItems(\n//         cartItems.map((x) =>\n//           x.id === food.id ? { ...exist, quantity: exist.quantity + 1 } : x\n//         )\n//       );\n//     } else {\n//       setCartItems([...cartItems, { ...food, quantity: 1 }]);\n//     }\n//   };\n//   const onRemove = (food) => {\n//     const exist = cartItems.find((x) => x.id === food.id);\n//     if (exist.quantity === 1) {\n//       setCartItems(cartItems.filter((x) => x.id !== food.id));\n//     } else {\n//       setCartItems(\n//         cartItems.map((x) =>\n//           x.id === food.id ? { ...exist, quantity: exist.quantity - 1 } : x\n//         )\n//       );\n//     }\n//   };\n//   const onCheckout = () => {\n//     tele.MainButton.text = \"Pay :)\";\n//     tele.MainButton.show();\n//   };\n//   return (\n//     <>\n//       <h1 className=\"heading\">Order Food</h1>\n//       <Cart cartItems={cartItems} onCheckout={onCheckout}/>\n//       <div className=\"cards__container\">\n//         {foods.map((food) => {\n//           return (\n//             <Card food={food} key={food.id} onAdd={onAdd} onRemove={onRemove} />\n//           );\n//         })}\n//       </div>\n//     </>\n//   );\n// }\n// export default App;\n// App.js\n// import { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import Card from \"./Components/Card/Card\";\n// import Cart from \"./Components/Cart/Cart\";\n// import { getData } from \"./db/db\";\n// import { sendSelectedItemsToBot } from \"../Bot/bot\";\n// require('dotenv').config();\n// const foods = getData();\n// const tele = window.Telegram.WebApp;\n// function App() {\n//   const [cartItems, setCartItems] = useState([]);\n//   const [botResponse, setBotResponse] = useState(\"\");\n//   useEffect(() => {\n//     tele.ready();\n//     // Simulate a bot response (replace this with your actual bot interaction logic)\n//     setBotResponse(\"Welcome! How can I assist you today?\");\n//   }, []);\n//   const onAdd = (food) => {\n//     setCartItems((prevItems) => {\n//       const existingItem = prevItems.find((item) => item.id === food.id);\n//       if (existingItem) {\n//         return prevItems.map((item) =>\n//           item.id === food.id ? { ...item, quantity: item.quantity + 1 } : item\n//         );\n//       } else {\n//         return [...prevItems, { ...food, quantity: 1 }];\n//       }\n//     });\n//     // Update the bot response\n//     setBotResponse(`Added ${food.title} to your cart.`);\n//   };\n//   const onRemove = (food) => {\n//     setCartItems((prevItems) => {\n//       const existingItem = prevItems.find((item) => item.id === food.id);\n//       if (existingItem && existingItem.quantity > 1) {\n//         return prevItems.map((item) =>\n//           item.id === food.id ? { ...item, quantity: item.quantity - 1 } : item\n//         );\n//       } else {\n//         return prevItems.filter((item) => item.id !== food.id);\n//       }\n//     });\n//     // Update the bot response\n//     setBotResponse(`Removed ${food.title} from your cart.`);\n//   };\n//   const onCheckout = () => {\n//     const selectedItems = cartItems.map((item) => ({\n//       id: item.id,\n//       title: item.title,\n//       quantity: item.quantity,\n//     }));\n//     // Call the function to send selected items to the bot\n//     //sendSelectedItemsToBot(selectedItems);\n//     tele.MainButton.text = \"Pay :)\";\n//     tele.MainButton.show();\n//       // Optionally, you can send the selected items to the bot immediately\n//       sendSelectedItemsToBot(selectedItems);\n//       const onPayButtonClick = async () => {\n//         // Call the function to send selected items to the bot\n//         await sendSelectedItemsToBot(cartItems);\n//         // Add any additional logic related to the \"Pay\" button click here\n//         console.log(\"Pay button clicked!\");\n//       };\n//   };\n//   return (\n//     <>\n//       <h1 className=\"heading\">Order Food</h1>\n//       <Cart cartItems={cartItems} onCheckout={onCheckout} />\n//       <div className=\"cards__container\">\n//         {foods.map((food) => (\n//           <Card food={food} key={food.id} onAdd={onAdd} onRemove={onRemove} />\n//         ))}\n//       </div>\n//       {/* Display the bot response */}\n//       <div className=\"bot-response\">{botResponse}</div>\n//       <button onClick={onPayButtonClick}>Pay</button>\n//     </>\n//   );\n// }\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/mazinabed/Desktop/testingbot/src/App.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import Card from \"./Components/Card/Card\";\n// import Cart from \"./Components/Cart/Cart\";\n// const { getData } = require(\"./db/db\");\n// const foods = getData();\n\n// const tele = window.Telegram.WebApp;\n\n// function App() {\n//   const [cartItems, setCartItems] = useState([]);\n\n//   useEffect(() => {\n//     tele.ready();\n//     setBotResponse(\"Welcome! How can I assist you today?\")\n//   },[]);\n\n//   const onAdd = (food) => {\n//     const exist = cartItems.find((x) => x.id === food.id);\n//     if (exist) {\n//       setCartItems(\n//         cartItems.map((x) =>\n//           x.id === food.id ? { ...exist, quantity: exist.quantity + 1 } : x\n//         )\n//       );\n//     } else {\n//       setCartItems([...cartItems, { ...food, quantity: 1 }]);\n//     }\n//   };\n\n//   const onRemove = (food) => {\n//     const exist = cartItems.find((x) => x.id === food.id);\n//     if (exist.quantity === 1) {\n//       setCartItems(cartItems.filter((x) => x.id !== food.id));\n//     } else {\n//       setCartItems(\n//         cartItems.map((x) =>\n//           x.id === food.id ? { ...exist, quantity: exist.quantity - 1 } : x\n//         )\n//       );\n//     }\n//   };\n\n//   const onCheckout = () => {\n//     tele.MainButton.text = \"Pay :)\";\n//     tele.MainButton.show();\n//   };\n\n//   return (\n//     <>\n//       <h1 className=\"heading\">Order Food</h1>\n//       <Cart cartItems={cartItems} onCheckout={onCheckout}/>\n//       <div className=\"cards__container\">\n//         {foods.map((food) => {\n//           return (\n//             <Card food={food} key={food.id} onAdd={onAdd} onRemove={onRemove} />\n//           );\n//         })}\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n// App.js\n// import { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import Card from \"./Components/Card/Card\";\n// import Cart from \"./Components/Cart/Cart\";\n// import { getData } from \"./db/db\";\n// import { sendSelectedItemsToBot } from \"../Bot/bot\";\n// require('dotenv').config();\n// const foods = getData();\n// const tele = window.Telegram.WebApp;\n\n// function App() {\n//   const [cartItems, setCartItems] = useState([]);\n//   const [botResponse, setBotResponse] = useState(\"\");\n\n//   useEffect(() => {\n//     tele.ready();\n//     // Simulate a bot response (replace this with your actual bot interaction logic)\n//     setBotResponse(\"Welcome! How can I assist you today?\");\n//   }, []);\n\n//   const onAdd = (food) => {\n//     setCartItems((prevItems) => {\n//       const existingItem = prevItems.find((item) => item.id === food.id);\n\n//       if (existingItem) {\n//         return prevItems.map((item) =>\n//           item.id === food.id ? { ...item, quantity: item.quantity + 1 } : item\n//         );\n//       } else {\n//         return [...prevItems, { ...food, quantity: 1 }];\n//       }\n//     });\n\n//     // Update the bot response\n//     setBotResponse(`Added ${food.title} to your cart.`);\n//   };\n\n//   const onRemove = (food) => {\n//     setCartItems((prevItems) => {\n//       const existingItem = prevItems.find((item) => item.id === food.id);\n\n//       if (existingItem && existingItem.quantity > 1) {\n//         return prevItems.map((item) =>\n//           item.id === food.id ? { ...item, quantity: item.quantity - 1 } : item\n//         );\n//       } else {\n//         return prevItems.filter((item) => item.id !== food.id);\n//       }\n//     });\n\n//     // Update the bot response\n//     setBotResponse(`Removed ${food.title} from your cart.`);\n//   };\n\n//   const onCheckout = () => {\n//     const selectedItems = cartItems.map((item) => ({\n//       id: item.id,\n//       title: item.title,\n//       quantity: item.quantity,\n//     }));\n\n//     // Call the function to send selected items to the bot\n//     //sendSelectedItemsToBot(selectedItems);\n\n//     tele.MainButton.text = \"Pay :)\";\n//     tele.MainButton.show();\n//       // Optionally, you can send the selected items to the bot immediately\n//       sendSelectedItemsToBot(selectedItems);\n//       const onPayButtonClick = async () => {\n//         // Call the function to send selected items to the bot\n//         await sendSelectedItemsToBot(cartItems);\n    \n//         // Add any additional logic related to the \"Pay\" button click here\n//         console.log(\"Pay button clicked!\");\n//       };\n//   };\n\n//   return (\n//     <>\n//       <h1 className=\"heading\">Order Food</h1>\n//       <Cart cartItems={cartItems} onCheckout={onCheckout} />\n//       <div className=\"cards__container\">\n//         {foods.map((food) => (\n//           <Card food={food} key={food.id} onAdd={onAdd} onRemove={onRemove} />\n          \n//         ))}\n//       </div>\n//       {/* Display the bot response */}\n//       <div className=\"bot-response\">{botResponse}</div>\n//       <button onClick={onPayButtonClick}>Pay</button>\n//     </>\n//   );\n// }\n\n// export default App;\n\n"],"mappings},"metadata":{},"sourceType":"module"}