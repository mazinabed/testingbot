{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSessionContext = exports.MemorySessionStore = exports.session = void 0;\n/**\n * Returns middleware that adds `ctx.session` for storing arbitrary state per session key.\n *\n * The default `getSessionKey` is <code>\\`${ctx.from.id}:${ctx.chat.id}\\`</code>.\n * If either `ctx.from` or `ctx.chat` is `undefined`, default session key and thus `ctx.session` are also `undefined`.\n *\n * Session data is kept only in memory by default,\n * which means that all data will be lost when the process is terminated.\n * If you want to store data across restarts, or share it among workers,\n * you can [install persistent session middleware from npm](https://www.npmjs.com/search?q=telegraf-session),\n * or pass custom `storage`.\n *\n * @example https://github.com/telegraf/telegraf/blob/develop/docs/examples/session-bot.ts\n * @deprecated https://github.com/telegraf/telegraf/issues/1372#issuecomment-782668499\n */\n\nfunction session(options) {\n  var _a, _b;\n\n  const getSessionKey = (_a = options === null || options === void 0 ? void 0 : options.getSessionKey) !== null && _a !== void 0 ? _a : defaultGetSessionKey;\n  const store = (_b = options === null || options === void 0 ? void 0 : options.store) !== null && _b !== void 0 ? _b : new MemorySessionStore();\n  return async (ctx, next) => {\n    const key = await getSessionKey(ctx);\n\n    if (key == null) {\n      return await next();\n    }\n\n    ctx.session = await store.get(key);\n    await next();\n\n    if (ctx.session == null) {\n      await store.delete(key);\n    } else {\n      await store.set(key, ctx.session);\n    }\n  };\n}\n\nexports.session = session;\n\nasync function defaultGetSessionKey(ctx) {\n  var _a, _b;\n\n  const fromId = (_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id;\n  const chatId = (_b = ctx.chat) === null || _b === void 0 ? void 0 : _b.id;\n\n  if (fromId == null || chatId == null) {\n    return undefined;\n  }\n\n  return `${fromId}:${chatId}`;\n}\n/** @deprecated https://github.com/telegraf/telegraf/issues/1372#issuecomment-782668499 */\n\n\nclass MemorySessionStore {\n  constructor() {\n    let ttl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n    this.ttl = ttl;\n    this.store = new Map();\n  }\n\n  get(name) {\n    const entry = this.store.get(name);\n\n    if (entry == null) {\n      return undefined;\n    } else if (entry.expires < Date.now()) {\n      this.delete(name);\n      return undefined;\n    }\n\n    return entry.session;\n  }\n\n  set(name, value) {\n    const now = Date.now();\n    this.store.set(name, {\n      session: value,\n      expires: now + this.ttl\n    });\n  }\n\n  delete(name) {\n    this.store.delete(name);\n  }\n\n}\n\nexports.MemorySessionStore = MemorySessionStore;\n\nfunction isSessionContext(ctx) {\n  return 'session' in ctx;\n}\n\nexports.isSessionContext = isSessionContext;","map":{"version":3,"names":["Object","defineProperty","exports","value","isSessionContext","MemorySessionStore","session","options","_a","_b","getSessionKey","defaultGetSessionKey","store","ctx","next","key","get","delete","set","fromId","from","id","chatId","chat","undefined","constructor","ttl","Infinity","Map","name","entry","expires","Date","now"],"sources":["/Users/mazinabed/Desktop/testingbot/node_modules/telegraf/lib/session.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isSessionContext = exports.MemorySessionStore = exports.session = void 0;\n/**\n * Returns middleware that adds `ctx.session` for storing arbitrary state per session key.\n *\n * The default `getSessionKey` is <code>\\`${ctx.from.id}:${ctx.chat.id}\\`</code>.\n * If either `ctx.from` or `ctx.chat` is `undefined`, default session key and thus `ctx.session` are also `undefined`.\n *\n * Session data is kept only in memory by default,\n * which means that all data will be lost when the process is terminated.\n * If you want to store data across restarts, or share it among workers,\n * you can [install persistent session middleware from npm](https://www.npmjs.com/search?q=telegraf-session),\n * or pass custom `storage`.\n *\n * @example https://github.com/telegraf/telegraf/blob/develop/docs/examples/session-bot.ts\n * @deprecated https://github.com/telegraf/telegraf/issues/1372#issuecomment-782668499\n */\nfunction session(options) {\n    var _a, _b;\n    const getSessionKey = (_a = options === null || options === void 0 ? void 0 : options.getSessionKey) !== null && _a !== void 0 ? _a : defaultGetSessionKey;\n    const store = (_b = options === null || options === void 0 ? void 0 : options.store) !== null && _b !== void 0 ? _b : new MemorySessionStore();\n    return async (ctx, next) => {\n        const key = await getSessionKey(ctx);\n        if (key == null) {\n            return await next();\n        }\n        ctx.session = await store.get(key);\n        await next();\n        if (ctx.session == null) {\n            await store.delete(key);\n        }\n        else {\n            await store.set(key, ctx.session);\n        }\n    };\n}\nexports.session = session;\nasync function defaultGetSessionKey(ctx) {\n    var _a, _b;\n    const fromId = (_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id;\n    const chatId = (_b = ctx.chat) === null || _b === void 0 ? void 0 : _b.id;\n    if (fromId == null || chatId == null) {\n        return undefined;\n    }\n    return `${fromId}:${chatId}`;\n}\n/** @deprecated https://github.com/telegraf/telegraf/issues/1372#issuecomment-782668499 */\nclass MemorySessionStore {\n    constructor(ttl = Infinity) {\n        this.ttl = ttl;\n        this.store = new Map();\n    }\n    get(name) {\n        const entry = this.store.get(name);\n        if (entry == null) {\n            return undefined;\n        }\n        else if (entry.expires < Date.now()) {\n            this.delete(name);\n            return undefined;\n        }\n        return entry.session;\n    }\n    set(name, value) {\n        const now = Date.now();\n        this.store.set(name, { session: value, expires: now + this.ttl });\n    }\n    delete(name) {\n        this.store.delete(name);\n    }\n}\nexports.MemorySessionStore = MemorySessionStore;\nfunction isSessionContext(ctx) {\n    return 'session' in ctx;\n}\nexports.isSessionContext = isSessionContext;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}