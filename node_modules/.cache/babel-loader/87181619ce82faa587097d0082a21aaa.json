{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst stream = require(\"stream\");\n\nconst check_1 = require(\"../helpers/check\");\n\nconst sandwich_stream_1 = require(\"sandwich-stream\");\n\nconst CRNL = '\\r\\n';\n\nclass MultipartStream extends sandwich_stream_1.default {\n  constructor(boundary) {\n    super({\n      head: `--${boundary}${CRNL}`,\n      tail: `${CRNL}--${boundary}--`,\n      separator: `${CRNL}--${boundary}${CRNL}`\n    });\n  }\n\n  addPart(part) {\n    const partStream = new stream.PassThrough();\n\n    for (const [key, header] of Object.entries(part.headers)) {\n      partStream.write(`${key}:${header}${CRNL}`);\n    }\n\n    partStream.write(CRNL);\n\n    if (MultipartStream.isStream(part.body)) {\n      part.body.pipe(partStream);\n    } else {\n      partStream.end(part.body);\n    }\n\n    this.add(partStream);\n  }\n\n  static isStream(stream) {\n    return typeof stream === 'object' && stream !== null && (0, check_1.hasPropType)(stream, 'pipe', 'function');\n  }\n\n}\n\nexports.default = MultipartStream;","map":{"version":3,"names":["Object","defineProperty","exports","value","stream","require","check_1","sandwich_stream_1","CRNL","MultipartStream","default","constructor","boundary","head","tail","separator","addPart","part","partStream","PassThrough","key","header","entries","headers","write","isStream","body","pipe","end","add","hasPropType"],"sources":["/Users/mazinabed/Desktop/testingbot/node_modules/telegraf/lib/core/network/multipart-stream.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream = require(\"stream\");\nconst check_1 = require(\"../helpers/check\");\nconst sandwich_stream_1 = require(\"sandwich-stream\");\nconst CRNL = '\\r\\n';\nclass MultipartStream extends sandwich_stream_1.default {\n    constructor(boundary) {\n        super({\n            head: `--${boundary}${CRNL}`,\n            tail: `${CRNL}--${boundary}--`,\n            separator: `${CRNL}--${boundary}${CRNL}`,\n        });\n    }\n    addPart(part) {\n        const partStream = new stream.PassThrough();\n        for (const [key, header] of Object.entries(part.headers)) {\n            partStream.write(`${key}:${header}${CRNL}`);\n        }\n        partStream.write(CRNL);\n        if (MultipartStream.isStream(part.body)) {\n            part.body.pipe(partStream);\n        }\n        else {\n            partStream.end(part.body);\n        }\n        this.add(partStream);\n    }\n    static isStream(stream) {\n        return (typeof stream === 'object' &&\n            stream !== null &&\n            (0, check_1.hasPropType)(stream, 'pipe', 'function'));\n    }\n}\nexports.default = MultipartStream;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,iBAAD,CAAjC;;AACA,MAAMG,IAAI,GAAG,MAAb;;AACA,MAAMC,eAAN,SAA8BF,iBAAiB,CAACG,OAAhD,CAAwD;EACpDC,WAAW,CAACC,QAAD,EAAW;IAClB,MAAM;MACFC,IAAI,EAAG,KAAID,QAAS,GAAEJ,IAAK,EADzB;MAEFM,IAAI,EAAG,GAAEN,IAAK,KAAII,QAAS,IAFzB;MAGFG,SAAS,EAAG,GAAEP,IAAK,KAAII,QAAS,GAAEJ,IAAK;IAHrC,CAAN;EAKH;;EACDQ,OAAO,CAACC,IAAD,EAAO;IACV,MAAMC,UAAU,GAAG,IAAId,MAAM,CAACe,WAAX,EAAnB;;IACA,KAAK,MAAM,CAACC,GAAD,EAAMC,MAAN,CAAX,IAA4BrB,MAAM,CAACsB,OAAP,CAAeL,IAAI,CAACM,OAApB,CAA5B,EAA0D;MACtDL,UAAU,CAACM,KAAX,CAAkB,GAAEJ,GAAI,IAAGC,MAAO,GAAEb,IAAK,EAAzC;IACH;;IACDU,UAAU,CAACM,KAAX,CAAiBhB,IAAjB;;IACA,IAAIC,eAAe,CAACgB,QAAhB,CAAyBR,IAAI,CAACS,IAA9B,CAAJ,EAAyC;MACrCT,IAAI,CAACS,IAAL,CAAUC,IAAV,CAAeT,UAAf;IACH,CAFD,MAGK;MACDA,UAAU,CAACU,GAAX,CAAeX,IAAI,CAACS,IAApB;IACH;;IACD,KAAKG,GAAL,CAASX,UAAT;EACH;;EACc,OAARO,QAAQ,CAACrB,MAAD,EAAS;IACpB,OAAQ,OAAOA,MAAP,KAAkB,QAAlB,IACJA,MAAM,KAAK,IADP,IAEJ,CAAC,GAAGE,OAAO,CAACwB,WAAZ,EAAyB1B,MAAzB,EAAiC,MAAjC,EAAyC,UAAzC,CAFJ;EAGH;;AA1BmD;;AA4BxDF,OAAO,CAACQ,OAAR,GAAkBD,eAAlB"},"metadata":{},"sourceType":"script"}